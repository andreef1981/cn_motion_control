//////////////////////////////////////////////////////////////
// MOTOR 3 FM1A rotary beam steering mirror stage
//////////////////////////////////////////////////////////////

//Channel PFM Hardware Settings

Gate3[1].Chan[0].PfmWidth=15			   	// Channel pulse-frequency-modulation output
											// pulse width (software reference manual p. 322)
											// units of pfm cycles; default 15
											
Gate3[1].Chan[0].OutputMode=8				// Servo IC channel output mode select; default=0
											// .outputMode=8 PFM on channel D
											// (software reference manual p. 314)
											
Gate3[1].Chan[0].PackOutData=0				// IC channel PWM/DAC “pack” enable; default=1
											// .PackOutData=0 no packaging all in seperate 
											// registers (software reference manual p. 317)
											
Gate3[1].Chan[0].OutputPol=0    			// IC channel phase output inversion control
											// default=0, range 0to3
											// (software reference manual p. 315)
											
Gate3[1].Chan[0].PfmDirPol=1    			// IC channel PFM direction polarity control
											// default=0 range 0ro1
											// (software reference manual p. 320)
											
Gate3[1].Chan[0].TimerMode=0				// IC Channel encoder timer control; default=0
											// .TimerMode=0 mu's are set by quadrature encoder
											// .TimerMode=3 internal puls and direction drive
											// channels timer circuit as counter leaves encoder
											// counter available for external signal 
											// (software reference manual p. 331)

Gate3[1].Chan[0].EncCtrl=3				// IC channel encoder decode control; default 7; 
											// range 0to15, how to decode input signal,
											// .EncCtrl=3 mu's are set by quadrature encoder 
											// (x4 quadrature decode CW)
											// .EncCtrl=7 mu's are set by quadrature encoder (x4
											// quadrature decode CCW
											// .EncCtrl=8 internal puls and direction CW
											// (software reference manual p. 306)
	
Gate3[1].Chan[0].CaptCtrl=2					// IC Channel position-capture control, default=1
											// range 0to15
											// 1 capture on index high
											// 2 capture on flag high
											// 10 capture on flag low
											// 15: Capture on (Index high AND Flag high)
											// (software reference manual p. 304)

//Gate3[1].Chan[0].CaptFlagSel=0	

//Encoder Conversion Table

EncTable[3].Type = 1									// Encoder table entry conversion method
														// default=auto based on hardware
														// range 0to15
														// .Type=1 Single-word (32-bit) read
														// (software reference manual p. 209)

EncTable[3].pEnc =Gate3[1].Chan[0].ServoCapt.a			// Encoder table entry primary source address
														// The typical addresses used depend on the 
														// conversion type. For type 1
														// .pEnc=Gate3[2].Chan[0].ServoCapt.a For a
														// PMAC3-style ASIC channel’s encoder counter
														// value with hardware interpolation from either
														// timer data (1/T) used with encoder
														// .pEnc =  Gate3[1].Chan[0].TimerA.a for internal
														// feedback loop with PFM signal no encoder
														// (software reference manual p. 199)

EncTable[3].index1 = 0									// Encoder table entry first conversion factor
														// type specific. For type 1 left shift of 32 bit
														// register
														// (software reference manual p. 185)

EncTable[3].index2 = 0									// Encoder table entry first conversion factor
														// type specific. For type 1 right shift of 32 bit
														// register
														// (software reference manual p. 188)

EncTable[3].index3 = 0									// Encoder table entry first conversion factor
														// type specific. For type 1 derivative
														// (software reference manual p. 191)

EncTable[3].index4 = 0									// Encoder table entry first conversion factor
														// type specific. For type 1 integrations if index2
														// > 32
														// (software reference manual p. 193)

EncTable[3].MaxDelta = 0								// Encoder table entry maximum legal output change
														// type specific. For type 1 if derivative limiting
														// is enabled. .MaxDelta=0 disabled
														// (software reference manual p. 197)

EncTable[3].ScaleFactor = 1/256							// Encoder table entry output scale factor
														// type 1: (single-word read): After the two shifting
														// operations specified by index2 and index1, the LSB 
														// of the actual data is typically in Bit (32 minus 
														// number of bits) of the 32-bit word. Since most users
														// want the output to be in units of LSBs of actual
														// data, this intermediate result must be multiplied
														// by 2-(32-[# of bits]). For example, if there were
														// 20 bits of real data, ScaleFactor should be set to
														// 2-(32-20), or 2-12, which is 0.00244140625.
														// (software reference manual p. 205)
														// To get the output of the conversion table in units
														// of encodre counts (most common),
														// EncTable[n].ScaleFactor should be set to 1/256 with 
														// encoder and 1.0 without encoder
														// (ACC24E reference manual p. 36 and 114)

//Motor Control

Motor[3].Ctrl=Sys.ServoCtrl							// Pointer to selected servo loop algorithm
													// default .Ctrl=Sys.ServoCtrl standard PID
													// Sys.PidCtrl very simple but fast
													// Sys.AdaptiveCtrl adaptive PID
													// Sys.PosCtrl just positon output no PID
													// (software reference manual p. 370)

Motor[3].PhaseCtrl=0								// Control flag to activate commutation tasks,
													// default=0 range 0to15
													// .PhaseCtrl=0 no phase commutation for steppers
													// (software reference manual p. 422)

Motor[3].ServoCtrl=1								// Control flag to activate servo tasks
													// default=0 range 0to15
													// .ServoCtrl=1 standard servo mode
													// (software reference manual p. 447)

Motor[3].pDac=Gate3[1].Chan[0].Pfm.a				// Command output pointer
													// (software reference manual p. 417)

Motor[3].pAmpFault=Gate3[1].Chan[0].Status.a		// Amplifier-fault (input) flag pointer
													// default=0 disabled
													// pAmpFault = Gate3[m].Chan[n].Status.a to use
													// (software reference manual p. 410)


Motor[3].AmpFaultLevel=1							// Amplifier-fault level
													// default=0
													// needs to be 1 so that high indicates fault

Motor[3].pAmpEnable=Gate3[1].Chan[0].OutCtrl.a		// Amplifier-enable (output) flag pointer
													// .pAmpEnable=Gate3[1].Chan[0].OutCtrl.a use 
													// .pAmpEnable=1 enable always
													// (software reference manual p. 409)

Motor[3].pLimits = Gate3[1].Chan[0].Status.a		// Overtravel limit (input) flag pointer
													// .pLimits = Gate3[1].Chan[0].Status.a use flags
													// .pLimits = 0 disable flags
													// (software reference manual p. 433)

Motor[3].pCaptFlag = Gate3[1].Chan[0].Status.a		// Encoder capture trigger (input) flag pointer
													// (software reference manual p. 415)

Motor[3].pCaptPos = Gate3[1].Chan[0].HomeCapt.a		// Encoder captured position pointer
													// (software reference manual p. 415)

Motor[3].pEnc = EncTable[3].a						// Outer (position) loop position feedback pointer
													// (software reference manual p. 418)

Motor[3].pEnc2 = EncTable[3].a						// Inner (velocity) loop position feedback pointer
													// (software reference manual p. 418)
													
Motor[3].pEncLoss=Gate3[1].Chan[0].Status.a													
Motor[3].EncLossBit=28
Motor[3].EncLossLevel=1

//Motor[3].pEncStatus = Gate3[1].Chan[0].Status.a
													// break controll see user manula p. 383
													              
// Motor PID servo setup

Motor[3].Servo.Kp = 2					// PID proportiona term		
Motor[3].Servo.Ki = 0.0				// PID integral term
Motor[3].Servo.Kvfb= 25.0					// PID velocity feedback (“derivative”) gain term
											// =0 see user manual p. 286

Motor[3].Servo.BreakPosErr = 2.0		// Servo gain-break error size (deadband)
Motor[3].Servo.Kbreak = 0				// Servo “gain break” relative gain within this dead band
Motor[3].InPosBand = 2.0

Motor[3].Servo.MaxPosErr= 28000.0		// Servo-error input magnitude limit
Motor[3].WarnFeLimit = 4000.0			// add BlSize
Motor[3].FatalFeLimit= 5000.0			// add BlSize

// Motor Speeds

Motor[3].JogSpeed=30						// Jog command velocity magnitude
										// mu / millisecond
										
Motor[3].MaxSpeed=30



Motor[3].HomeVel=10

Motor[3].JogTa=-0.5					// Jog accel/decel time or inverse rate
										// > 0 mu / millisecond
										// < 0 mu / millisecond^2
										// -200 -> 0.005 mu/ms^2 -> 5m/s^2 or 0.5g

Motor[3].JogTs=-10000					// Jog accel/decel S-curve time or inverse jerk rate
										// > 0 mu / millisecond
										// < 0 mu / millisecond^3
										// -50 -> 0.02m/s^3
										// -12500 -> 0.00008 mu/ms^3 -> 80m/s^3 -> 80g/s
										
Motor[3].AbortTa=-0.5						// deceleration for abort (hit limit switch
Motor[3].AbortTs=0									

//Motor[3].BlSize=0.0					// Backlash size

//Motor[3].BlHysteresis =0.0				// Backlash take-up rate

Motor[3].HomeOffset=0.0					// Position referencing offset	


// Coordinate system

&3									// Address C.S. 1

#3->1X
					