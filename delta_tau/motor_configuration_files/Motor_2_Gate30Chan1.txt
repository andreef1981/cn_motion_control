///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MOTOR xxx xxx stage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Channel PFM Hardware Settings

Gate3[0].Chan[1].PfmWidth=15				//May be stepper drive specific
							// units of pfm cycles
Gate3[0].Chan[1].OutputMode=8				// PFM on channel D
Gate3[0].Chan[1].PackOutData=0
Gate3[0].Chan[1].OutputPol=0    			//May be stepper drive specific
Gate3[0].Chan[1].PfmDirPol=0    			//May be stepper drive specific
Gate3[0].Chan[1].TimerMode=3				// internal puls and direction drive channels timer circuit as counter
							// leaves encoder counter available for external signal 
							// default 0 hardware 1/T

Gate3[0].Chan[1].EncCtrl=8				//default 7, how to decode input signal, 8 internal puls and direction CW

//Gate3[0].Chan[1].TimerMode=0				// mu's are set by quadrature encoder
//Gate3[0].Chan[1].EncCtrl = 7				// Quadrature direction same as jog direction

							// not part of delta tau basic setup
//Gate3[0].Chan[1].Pfm=0				// not part of delta tau basic setup
							//[-2,147,483,392..2,147,483,391], default 0
							//command value for pfm accumulator
							// f_out = gate.chan.pfm * f_pfmclk / 4,294,483,648
Gate3[0].Chan[1].CaptCtrl=2				// how flags are detected 2 flat high 10 flag low

//Encoder Conversion Table

EncTable[2].Type = 1
EncTable[2].pEnc =  Gate3[0].Chan[1].TimerA.a		// delta tau basic setup
//EncTable[2].pEnc = Acc24E3[0].Chan[1].ServoCapt.a;
EncTable[2].index1 =  0
EncTable[2].index2 = 0
//EncTable[2].index3 =  0
//EncTable[2].MaxDelta =  0
EncTable[2].ScaleFactor = 1/256 

//Motor Control

Motor[2].PhaseCtrl=0					// default 0 [0..15], commutation calculation
Motor[2].ServoCtrl=1					// default 0 [0..15], 1=standard mode
Motor[2].pDac=Gate3[0].Chan[1].Pfm.a
Motor[2].pAmpFault=0                  			//May be stepper drive specific
//Motor[2].pAmpEnable=1                  		//May be stepper drive specific
Motor[2].pAmpEnable=Gate3[0].Chan[1].OutCtrl.a

Motor[2].pLimits=0
//Motor[2].pLimits = Gate3[0].Chan[1].Status.a
Motor[2].pCaptFlag = Gate3[0].Chan[1].Status.a
//Motor[2].pCaptFlag = Gate3[0].Chan[1].HomeCapt.a
Motor[2].pCaptPos = Gate3[0].Chan[1].HomeCapt.a
// Motor[2].CaptFlagBit=21				//page 419 user manual

Motor[2].pEnc = EncTable[2].a
//Motor[2].pEnc2 = EncTable[2].a
                                       
//Motor Gains

Motor[2].Servo.Kp = 4
Motor[2].Servo.Ki = 0
Motor[2].Servo.BreakPosErr = 2.0
Motor[2].Servo.Kbreak = 0 
//Motor[2].JogSpeed=10.
Motor[2].JogSpeed=0.1
Motor[2].homevel=0.1

Motor[2].JogTa=1000
Motor[2].JogTs=1000

//Motor[2].BlSize=90
//Motor[2].BlSize=100
//Motor[2].BlSlewRate =20

//Motor[2].HomeOffset=20
//Motor[2].HomeOffset=30
//Gate3[0].Chan[1].Pfm=10000.

&2							// Address C.S. 1

#2->22.22AX
//Coord[2].PosRollOver[1]=18000
//Coord[1].PosRollOver[2]=200
Coord[2].PosRollOver[0]=360

//&1

 
